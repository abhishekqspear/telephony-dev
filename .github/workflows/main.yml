name: Build and push docker image to ECR
on:
  push:
    branches: ["deployment"]
  pull_request:
    branches: ["deployment"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: "v1.27.0" # default is latest stable
        id: install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: telephony-dev
          IMAGE_TAG: latest
          IMAGE_NAME: telephony-dev
        run: |
          docker build --build-arg TWILIO_ACCOUNT_SID=${{ vars.TWILIO_ACCOUNT_SID }} --build-arg TWILIO_AUTH_TOKEN=${{ vars.TWILIO_AUTH_TOKEN }} --build-arg TWILIO_PHONE_NUMBER=${{ vars.TWILIO_PHONE_NUMBER }} --build-arg PLIVO_AUTH_ID=${{ vars.PLIVO_AUTH_ID }} --build-arg PLIVO_AUTH_TOKEN=${{ vars.PLIVO_AUTH_TOKEN }} --build-arg PLIVO_PHONE_NUMBER=${{ vars.PLIVO_PHONE_NUMBER }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker images
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -Lo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v5.4.2/kustomize_v5.4.2_linux_amd64
          chmod u+x ./kustomize

      - name: Update kube config
        run: aws eks update-kubeconfig --name voice-ai-dev-cluster --region ap-south-1

      - name: Deploy nodejs helm chart to EKS
        env:
          DEPLOYMENT_NAME: dolphin-telephony-dev
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: telephony-dev
          IMAGE_TAG: latest
          IMAGE_NAME: telephony-dev
        run: |
          kustomize edit set image $REGISTRY/$REPOSITORY=$REGISTRY/$REPOSITORY:latest
          kustomize build . | kubectl apply -f -
          kubectl rollout restart deployment/dolphin-telephony-dev -n beetlelabs-dev
          kubectl rollout status deployment/dolphin-telephony-dev -n beetlelabs-dev
          kubectl get services -o wide

      - name: Notify pipeline result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment to EKS succeeded on branch ${{ github.ref }} by ${{ github.actor }}"
          else
            echo "❌ Deployment to EKS failed on branch ${{ github.ref }} by ${{ github.actor }}"
          fi

      # - name: Teams Notification on Failure
      #   if: failure()
      #   uses: septblast/ms-teams-notification@v2.0.2
      #   with:
      #     github-token: ${{ github.token }} # this will use the runner's token.
      #     ms-teams-webhook-uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
      #     notification-summary: Build failed on ${{ github.ref }} by ${{ github.actor }}. [View build](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
      #     notification-color: 17a2b8
      #     timezone: Asia/Kolkata

      # - name: Teams Notification on Success
      #   if: success()
      #   uses: septblast/ms-teams-notification@v2.0.2
      #   with:
      #     github-token: ${{ github.token }} # this will use the runner's token.
      #     ms-teams-webhook-uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
      #     notification-summary: Build succeeded and deployed version on ${{ github.ref }} by ${{ github.actor }}. [View build](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
      #     notification-color: 17a2b8
      #     timezone: Asia/Kolkata
